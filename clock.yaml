substitutions:
  timezone: "Europe/London"
  button_gpio:
    hour: GPIO22
    minute: GPIO23
    zero: GPIO24
  display_gpio:
    sda: GPIO18
    scl: GPIO26
  rtc_gpio:
    sda: GPIO17
    scl: GPIO16

esphome:
  name: gt86
  on_boot:
    - priority: 200
      then:
        - ds1307.read_time:
            id: ds1307_time
        - logger.log: Time read by ds1307
        
esp32:
  board: mhetesp32minikit

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "GT86"
    password: !secret ap_password

web_server:

logger:

i2c:
  - id: oled
    sda: ${display_gpio.sda}
    scl: ${display_gpio.scl}
  - id: rtc
    sda: ${rtc_gpio.sda}
    scl: ${rtc_gpio.scl}

globals:
  - id: page
    type: int
    initial_value: "1"

time:
  - platform: sntp
    id: sntp_time
    timezone: ${timezone}
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    # On time sync, set the RTC
    on_time_sync:
      then:
        - ds1307.write_time:
            id: ds1307_time
        - logger.log: "RTC Updated from SNTP"
        - delay: 1s
        - ds1307.read_time: 
            id: ds1307_time
        - logger.log: Time read by ds1307

  - platform: ds1307
    id: ds1307_time
    i2c_id: rtc

image:
  - id: car
    file: "images/car.xbm"
    type: BINARY
  - id: logo
    file: "images/logo.xbm"
    type: BINARY

binary_sensor:
  - id: hour_button
    name: "Hour Button"
    platform: gpio
    pin:
      number: ${button_gpio.hour}
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - display.page.show_next: oled_display

font:
  - id: font_small
    file: "blockblueprint.medium.ttf"
    size: 22
  - id: font_large
    file: "blockblueprint.medium.ttf"
    size: 22

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    id: oled_display
    i2c_id: oled
    update_interval: 0.01s
    pages:
      - id: p_splash
        lambda: |-
          it.image(0, 0, id(car));
      - id: p_time
        lambda: |-
          if (id(ds1307_time).now().second % 2 == 0) {
            it.strftime(0, it.get_height() / 2, id(font_large), TextAlign::CENTER_LEFT, "%H:%M", id(ds1307_time).now());
          }else{
            it.strftime(0, it.get_height() / 2, id(font_large), TextAlign::CENTER_LEFT, "%H %M", id(ds1307_time).now());
          }

          it.image(it.get_width() - 32, 0, id(logo));
      - id: p_date
        lambda: |-
          it.strftime(it.get_width() / 2, it.get_height() / 2, id(font_small), TextAlign::CENTER, "%d/%m/%y", id(ds1307_time).now());